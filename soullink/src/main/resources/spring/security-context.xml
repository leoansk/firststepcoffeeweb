<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 허용되지 않은 사용자가 접근할 경우 에러 페이지 처리 2번째 방법 -->
	<bean id="customAccessDenied" class="com.ansk.web.security.CustomAccessDeniedHandler">
	</bean>
	<!-- 로그인 성공 후 처리를 담당하는 핸들러 빈으로 등록 -->
	<bean id="customLoginSuccess" class="com.ansk.web.security.CustomLoginSuccessHandler">
	</bean>
	
	<!-- 권한을 가지고 있지 않은 사용자가 접근할 경우 접근 에러 메시지가 뜨는데 AccessDeniedHandler를 직접 구현하거나 특정한 url을 지정할 수 있다. -->
	<security:http auto-config="true" use-expressions="true">
		<!-- 특정한 url에 접근할 때 인터셉터를 이용해서 접근을 제한하는 설정 pattern은 url패턴을 의미하고 access의 경우 권한을 체크-->
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- 허용되지 않은 사용자가 접근할 경우 에러 페이지 처리 1번째 방법-->
		<!-- <security:access-denied-handler error-page="/sample/accessError"/>	 -->
		<!-- 허용되지 않은 사용자가 접근할 경우 에러 페이지 처리 2번째 방법 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- login-page속성의 uri는 반드시 get방식으로 접근하는 uri를 지정해야 한다. -->
		<!-- authentication-success-handler-ref는 로그인 성공 후 처리를 담당하는 빈 id를 넣어줌-->
		<security:form-login login-page="/sample/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- 로그아웃 처리 후 직접 로직을 처리할 수 있는 핸들러 -->
		<!-- 로그아웃 시 세션을 무효화 시키는 설정이나 특정한 쿠키를 지우는 작업을 지정할 수 있다. -->
		<security:logout logout-url="/sample/customLogout" invalidate-session="true"/>
		
		<!-- csrf CrossSiteRequestForgery 비활성화 방법 -->
		<!-- <security:csrf disabled="true"/> -->
	</security:http>
	
	<!-- 스프링 시큐리티가 동작하기 위해선 Authentication Manager라는 존재와 스프링 시큐리티의 시작지점이 필요하기 때문에 위와 같이 최소한의 설정을 지정한 후에 실행해준다. -->
	<!-- 지정된 아아디와 패스워드로 로그인이 가능하도록 설정 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service>
			
			<!-- jdbc를 이용하는 web security설정 (root-context.xml에 Bean설정해놓은 dataSource를 활용)-->
			<!--
				<security:jdbc-user-service data-source-ref="dataSource"/>
			-->
		</security:authentication-provider>
	</security:authentication-manager>
	
	
</beans>
